// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "teaclave_common.edl" import *;

    untrusted {
        int u_setsockopt_ocall([out] int *error, int sockfd, int level, int optname, [in, size=optlen] const void *optval, socklen_t optlen); // Ocall from rust_sgx_sdk_edl/sgx_socket.edl
        int u_sched_yield_ocall([out]int *error); // Ocall from rust_sgx_sdk_edl/sgx_thread.edl
        char *u_realpath_ocall([out] int *error, [in, string] const char *pathname); // Ocall from rust_sgx_sdk_edl/sgx_file.edl
        int u_listen_ocall([out] int *error, int sockfd, int backlog); // Ocall from rust_sgx_sdk_edl/sgx_socket.edl
        int u_bind_ocall([out] int *error, int sockfd, [in, size=addrlen] const struct sockaddr *addr, socklen_t addrlen); // Ocall from rust_sgx_sdk_edl/sgx_socket.edl
        int u_accept4_ocall([out] int *error, int sockfd, [in, out, size=addrlen_in] struct sockaddr *addr, socklen_t addrlen_in, [out] socklen_t *addrlen_out, int flags); // Ocall from rust_sgx_sdk_edl/sgx_socket.edl
    };
};
